#!/usr/bin/env python3

import rospy
import math
import subprocess
from sensor_msgs.msg import Joy
from geometry_msgs.msg import Vector3
from uav_gazebo_msgs.msg import (
    PositionYawControl,
    ThrustAttitudeControl,
    ThrustTorqueControl,
    ThrustVelocityControl,
    VelocityYawRateControl,
    ControlMode
)
from uav_gazebo_msgs.srv import SwitchMode
from gazebo_msgs.msg import ModelState
from geometry_msgs.msg import Point, Quaternion, Twist

# Define joystick button enum
class JOYButtons:
    CROSS = 0       # POSITION_YAW
    CIRCLE = 1      # VELOCITY_YAWRATE
    SQUARE = 2      # THRUST_ATTITUDE
    TRIANGLE = 3    # THRUST_VELOCITY
    L1 = 4          # THRUST_TORQUE
    R1 = 5          # INACTIVE, STOP, SWITCHOFF, DROP
    SHARE = 8       # 
    OPTIONS = 9     #
    PS = 10         #
    LEFT = 11       # RESET DRONE POSITION
    RIGHT = 12      # RESET DRONE POSITION
    
# Define joystick axis enum
class JOYAxes:
    LEFT_STICK_X = 0
    LEFT_STICK_Y = 1
    RIGHT_STICK_X = 3
    RIGHT_STICK_Y = 4
    R2 = 5
    L2 = 2

# Mapping from Joy buttons to control modes
BUTTON_MODE_MAPPING = {
    JOYButtons.R1: ControlMode.INACTIVE,              # 0
    JOYButtons.CROSS: ControlMode.POSITION_YAW,       # 1
    JOYButtons.CIRCLE: ControlMode.VELOCITY_YAWRATE,  # 2
    JOYButtons.SQUARE: ControlMode.THRUST_ATTITUDE,   # 3
    JOYButtons.TRIANGLE: ControlMode.THRUST_VELOCITY, # 4
    JOYButtons.L1: ControlMode.THRUST_TORQUE,         # 5
}

# Mapping from control mode numbers to their human-readable names
MODE_NAME = {
    ControlMode.INACTIVE: "INACTIVE",
    ControlMode.POSITION_YAW: "POSITION_YAW",
    ControlMode.VELOCITY_YAWRATE: "VELOCITY_YAWRATE",
    ControlMode.THRUST_ATTITUDE: "THRUST_ATTITUDE",
    ControlMode.THRUST_VELOCITY: "THRUST_VELOCITY",
    ControlMode.THRUST_TORQUE: "THRUST_TORQUE"
}

# Scaling factors for easy tuning
POSITION_SCALE = 10.0
YAW_SCALE = math.pi 
VELOCITY_SCALE = 1.0
ACCELERATION_SCALE = 1.0
THRUST_SCALE = 10.0
ATTITUDE_SCALE = math.pi
DEADZONE = 0.1

class JoyDroneController:
    def __init__(self):
        rospy.init_node('joy_drone_controller')

        self.deadzone = DEADZONE
        # Set default mode        
        self.current_mode = ControlMode.VELOCITY_YAWRATE
        # Initialize node process (pursuit controller)
        self.pursuit_controller_process = None

        # Publishers for control commands
        self.pub_position_yaw = rospy.Publisher('/drone/position_yaw/command', PositionYawControl, queue_size=10)
        self.pub_thrust_attitude = rospy.Publisher('/drone/thrust_attitude/command', ThrustAttitudeControl, queue_size=10)
        self.pub_thrust_torque = rospy.Publisher('/drone/thrust_torque/command', ThrustTorqueControl, queue_size=10)
        self.pub_thrust_velocity = rospy.Publisher('/drone/thrust_velocity/command', ThrustVelocityControl, queue_size=10)
        self.pub_velocity_yawrate = rospy.Publisher('/drone/velocity_yawrate/command', VelocityYawRateControl, queue_size=10)
        self.pub_model_state = rospy.Publisher('/gazebo/set_model_state', ModelState, queue_size=10)

        # Wait for the switch_mode service and create a proxy
        rospy.wait_for_service('/drone/switch_mode')
        self.switch_mode_client = rospy.ServiceProxy('/drone/switch_mode', SwitchMode)

        rospy.Subscriber('/joy', Joy, self.joy_callback)
        self.last_button_states = []
        rospy.loginfo(f"JoyDroneController started in {MODE_NAME[self.current_mode]} mode.")

    def publish_model_state(self, model_name, position, orientation, twist=None, reference_frame='world'):
        """
        Publishes the state of a Gazebo model using the provided parameters.
        
        Parameters:
        model_name (str): Name of the model in Gazebo.
        position (tuple): A 3-tuple (x, y, z) for the position.
        orientation (tuple): A 4-tuple (x, y, z, w) representing the quaternion.
        twist (tuple, optional): A 6-tuple (lin_x, lin_y, lin_z, ang_x, ang_y, ang_z).
                                Defaults to zero twist if not provided.
        reference_frame (str, optional): The frame of reference. Defaults to 'world'.
        """
        # If no twist is provided, use zero velocity.
        if twist is None:
            twist = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
        
        # Create the ModelState message.
        state_msg = ModelState()
        state_msg.model_name = model_name
        state_msg.pose.position = Point(*position)
        state_msg.pose.orientation = Quaternion(*orientation)
        state_msg.twist.linear = Vector3(twist[0], twist[1], twist[2])
        state_msg.twist.angular = Vector3(twist[3], twist[4], twist[5])
        state_msg.reference_frame = reference_frame

        # Publish the message.
        self.pub_model_state.publish(state_msg)
        rospy.loginfo(f"Published new state for model: {model_name}")

    def _dz(self, v):
        #—— apply deadzone + re‑scale ——#
        if abs(v) < self.deadzone:
            return 0.0
        sign = math.copysign(1.0, v)
        # linear remap from [deadzone,1]→[0,1]
        return sign * (abs(v) - self.deadzone) / (1.0 - self.deadzone)

    def joy_callback(self, msg):

        axes = [self._dz(v) for v in msg.axes]

        # Initialize last_button_states if empty
        if not self.last_button_states:
            self.last_button_states = list(msg.buttons)

        new_mode = None
        # Check for a rising edge on any mapped button to trigger a mode switch
        for btn_idx, mode in BUTTON_MODE_MAPPING.items():
            if btn_idx < len(msg.buttons) and msg.buttons[btn_idx] == 1 and self.last_button_states[btn_idx] == 0:
                new_mode = mode
                break

        # If a mode change is detected, call the switch_mode service with a proper request message
        if new_mode is not None and new_mode != self.current_mode:
            self.current_mode = new_mode
            try:
                req = ControlMode()  # Create a request message
                req.mode = new_mode
                response = self.switch_mode_client(req)
                if response.success:
                    rospy.loginfo(f"Switched drone mode to: {MODE_NAME[new_mode]}")
                else:
                    rospy.logerr(f"Failed to switch drone mode to: {MODE_NAME[new_mode]}")
            except rospy.ServiceException as e:
                rospy.logerr(f"Switch mode service call failed: {e}")

        # Check for LEFT or RIGHT button press to set the drone position
        # Using rising edge detection based on button state changes.
        if len(msg.buttons) > JOYButtons.LEFT:
            if msg.buttons[JOYButtons.LEFT] == 1 and self.last_button_states[JOYButtons.LEFT] == 0:
                rospy.loginfo("LEFT button pressed: Resetting drone position at (0,0,6).")
                self.publish_model_state('drone', (0.0, 0.0, 6.0), (0.0, 0.0, 0.0, 1.0))
        if len(msg.buttons) > JOYButtons.RIGHT:
            if msg.buttons[JOYButtons.RIGHT] == 1 and self.last_button_states[JOYButtons.RIGHT] == 0:
                rospy.loginfo("RIGHT button pressed: Setting drone position at (0,0,1).")
                self.publish_model_state('drone', (0.0, 0.0, 1.0), (0.0, 0.0, 0.0, 1.0))

        # Detect button rising edge for SHARE button
        # This button is used to start or restart the pursuit controller node
        if msg.buttons[JOYButtons.SHARE] == 1 and self.last_button_states[JOYButtons.SHARE] == 0:
            rospy.loginfo("Trigger button pressed - checking for existing node instance.")
            # Check if there's an already running instance
            if self.pursuit_controller_process is not None and self.pursuit_controller_process.poll() is None:
                rospy.loginfo("Another instance is running. Restarting the node...")
                self.pursuit_controller_process.terminate()
                try:
                    self.pursuit_controller_process.wait(timeout=5)
                except Exception as e:
                    rospy.logwarn("Node did not terminate gracefully: %s", e)
                    self.pursuit_controller_process.kill()
            else:
                rospy.loginfo("No running instance found. Starting a new node.")

            # Start (or restart) the node process
            self.pursuit_controller_process = subprocess.Popen(["rosrun", "uav_gazebo", "pursuit_controller"])
            # self.pursuit_controller_process = subprocess.Popen(["rosrun", "uav_gazebo", "waypoint_follower_ruckig"])
            # Teleport the drone to a new position
            self.publish_model_state('drone', (0.0, 0.0, 6.0), (0.0, 0.0, 0.0, 1.0))
            
 
        # Update button state history to avoid repeated triggers (edge detection)
        self.last_button_states = list(msg.buttons)

        # Publish control command based on current mode using scaled joystick axes
        if self.current_mode == ControlMode.POSITION_YAW:
            # Uses thrust and attitude controls
            cmd = PositionYawControl()
            if len(axes) >= 8:
                cmd.position = Vector3(
                    axes[JOYAxes.LEFT_STICK_Y] * POSITION_SCALE,
                    axes[JOYAxes.LEFT_STICK_X] * POSITION_SCALE,
                    axes[JOYAxes.RIGHT_STICK_Y] * POSITION_SCALE
                )
            cmd.yaw = axes[JOYAxes.RIGHT_STICK_X] * YAW_SCALE
            self.pub_position_yaw.publish(cmd)

        elif self.current_mode == ControlMode.VELOCITY_YAWRATE:
            cmd = VelocityYawRateControl()
            if len(axes) >= 8:
                cmd.velocity = Vector3(
                    axes[JOYAxes.LEFT_STICK_Y] * VELOCITY_SCALE,
                    axes[JOYAxes.LEFT_STICK_X] * VELOCITY_SCALE,
                    axes[JOYAxes.RIGHT_STICK_Y] * VELOCITY_SCALE
                )
                cmd.acceleration = Vector3(
                    axes[JOYAxes.L2] * ACCELERATION_SCALE,
                    axes[JOYAxes.R2] * ACCELERATION_SCALE,
                    0.0
                )
            cmd.yaw_rate = axes[JOYAxes.RIGHT_STICK_X] * YAW_SCALE
            cmd.body_frame = True
            self.pub_velocity_yawrate.publish(cmd)

        elif self.current_mode == ControlMode.THRUST_ATTITUDE:
            # Thrust and Angle: The thrust is forwarded as is. For the attitude control, a proportional and derivative pseud-control is evaluated
            cmd = ThrustAttitudeControl()
            if len(axes) >= 8:
                cmd.thrust = axes[JOYAxes.RIGHT_STICK_Y] * THRUST_SCALE
                cmd.attitude = Vector3(
                    axes[JOYAxes.RIGHT_STICK_X] * ATTITUDE_SCALE,
                    axes[JOYAxes.LEFT_STICK_X] * ATTITUDE_SCALE,
                    axes[JOYAxes.LEFT_STICK_Y] * ATTITUDE_SCALE
                )
                cmd.attitude_rates = Vector3(
                    axes[JOYAxes.L2] * ATTITUDE_SCALE,
                    axes[JOYAxes.R2] * ATTITUDE_SCALE,
                    0.0
                )
            self.pub_thrust_attitude.publish(cmd)

        elif self.current_mode == ControlMode.THRUST_VELOCITY:
            # Thrust and AngVel: The thrust is forwarded as is, while the torque is computed using a proportional controller
            cmd = ThrustVelocityControl()
            if len(axes) >= 8:
                cmd.thrust = axes[JOYAxes.RIGHT_STICK_Y] * THRUST_SCALE
                cmd.velocity = Vector3(
                    axes[JOYAxes.RIGHT_STICK_X] * VELOCITY_SCALE,
                    axes[JOYAxes.LEFT_STICK_X] * VELOCITY_SCALE,
                    axes[JOYAxes.LEFT_STICK_Y] * VELOCITY_SCALE
                )
                cmd.acceleration = Vector3(
                    axes[JOYAxes.L2] * ACCELERATION_SCALE,
                    axes[JOYAxes.R2] * ACCELERATION_SCALE,
                    0.0
                )
            self.pub_thrust_velocity.publish(cmd)

        elif self.current_mode == ControlMode.THRUST_TORQUE:
            # Direct control: thrust and torque are directly sent to move the drone
            cmd = ThrustTorqueControl()
            if len(axes) >= 4:
                cmd.thrust = axes[JOYAxes.RIGHT_STICK_Y] * THRUST_SCALE
                cmd.torque = Vector3(
                    axes[JOYAxes.RIGHT_STICK_X] * ATTITUDE_SCALE,
                    axes[JOYAxes.LEFT_STICK_X] * ATTITUDE_SCALE,
                    axes[JOYAxes.LEFT_STICK_Y] * ATTITUDE_SCALE
                )
            self.pub_thrust_torque.publish(cmd)
        
        # In INACTIVE mode, no control command is published.

    def spin(self):
        rospy.spin()

if __name__ == '__main__':
    try:
        controller = JoyDroneController()
        controller.spin()
    except rospy.ROSInterruptException:
        pass
