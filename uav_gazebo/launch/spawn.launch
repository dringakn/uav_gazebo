<launch>

  <!-- 
  Simulated Time (use_sim_time = true):
  When you set use_sim_time = true, the ROS system starts 
  using simulation time rather than system time. 
  Simulation time is controlled by Gazebo and is synchronized 
  with the physics engine.
  
  If Gazebo’s physics engine or clock isn’t running smoothly 
  or if time synchronization between nodes becomes skewed, 
  you may encounter repeated or redundant timestamps, 
  where the same timestamp is published multiple times for 
  different data.

  In this case, the TF_REPEATED_DATA warning occurs because 
  the transform being published (for the drone frame) has 
  the same timestamp as the previous message, and ROS is 
  flagging this as redundant. This can happen due to slight 
  variations in how fast Gazebo publishes data or updates 
  the simulation clock.

  Real System Time (use_sim_time = false):
  When you set use_sim_time = false, ROS uses the system 
  clock (your computer’s real-time clock). In this mode, 
  the time is continuously progressing, and redundant 
  timestamps are far less likely to occur unless there’s 
  an issue with your code or nodes publishing the same 
  timestamp by mistake.

  Since real-time is used, the warning disappears because 
  there’s less risk of time synchronization issues, 
  and the time between messages is not influenced by 
  simulation pauses, resets, or slowdowns.
   -->
  <param name="use_sim_time" value="false" />

  <!-- Name of the drone -->
  <arg name="name" default="drone"/>

  <!-- GPS parameters -->
  <arg name="gps_update_rate" default="5.0"/>
  <arg name="gps_ref_lat"     default="49.397742"/>
  <arg name="gps_ref_lon"     default="9.545594"/>
  <arg name="gps_ref_alt"     default="300.0"/>
  <arg name="gps_noise_std"   default="1.0"/>


  <!-- Load a URDF on the ROS parameter server -->
  <param name="robot_description" command="$(find xacro)/xacro '$(find uav_gazebo)/urdf/drone.xacro' name:=$(arg name) gps_update_rate:=$(arg gps_update_rate) gps_ref_lat:=$(arg gps_ref_lat) gps_ref_lon:=$(arg gps_ref_lon) gps_ref_alt:=$(arg gps_ref_alt) gps_noise_std:=$(arg gps_noise_std)"/>
  
  <!-- spawn the robot into Gazebo -->
  <arg name="pos_x" default="0"/>
  <arg name="pos_y" default="0"/>
  <arg name="pos_z" default="0.05"/>

  <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -x $(arg pos_x) -y $(arg pos_y) -z $(arg pos_z) -urdf -model $(arg name)" output="screen"/>

  <!-- Start a node that simplifies the "takeoff" process -->
  <node name="simple_drone_manager" pkg="uav_gazebo" type="simple_drone_manager" output="screen">
    <param name="drone_namespace" value="$(arg name)"/>
  </node>

</launch>
